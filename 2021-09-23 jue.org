#+TITLE: septiembre 23, 2021 (jueves)
** BDA
| ciudad   | guia |
|----------+------|
| Valencia | g1   |
| Valencia | g2   |
| Vigo     | g1   |

Integridad Referencia DEBIL
 | código | destino  | guia |   |
 |--------+----------+------+---|
 | v1     | Valencia | g2   | + |
 | v2     | Vigo     | g2   | - |
 | v3     | nulo     | nulo | + |
 | v4     | Valencia | nulo | + |
 | v5     | XXXX     | nulo | + |

 Integridad Referencia PARCIAL
 | código | destino  | guia |   |
 |--------+----------+------+---|
 | v1     | Valencia | g2   | + |
 | v2     | Vigo     | g2   | - |
 | v3     | nulo     | nulo | + |
 | v4     | Valencia | nulo | + |
 | v5     | XXXX     | nulo | - |

 Integridad Referencia TOTAL
 | código | destino  | guia |   |
 |--------+----------+------+---|
 | v1     | Valencia | g2   | + |
 | v2     | Vigo     | g2   | - |
 | v3     | nulo     | nulo | + |
 | v4     | Valencia | nulo | - |
 | v5     | XXXX     | nulo | - |

*** Integridad Refernecial
En general frente a una actulización de la BD que viole alguna restricción, el SGBD la rechaza, dejando la BD en el estado anterior a la modifcación

La comprobación de la restricciones es comepetencia de SGBD que ha de gratizar que toda actulización de la BD genera una nueva extensión que satisfaga atoda las restricciones de integridad

En algunos casos sería deseable un comportamiento menos rígidos que permita indicar al SBBD lo que debe hacer cuando se viole la integridad

*** Ejercicio
Despacho
| coddes | edificio | capacidad |
|--------+----------+-----------|
|    228 | 1F       |         5 |
|    010 | 1F       |         5 |
|    228 | 1G       |         1 |
|    234 | 2G       |         2 |

Telefono
| numero | coddes | edificio |
|--------+--------+----------|
|   3541 |    228 | 1F       |
|   3540 |    010 | 1F       |
|   3202 |    228 | 1G       |

Borrado a nulo y modificación en cascada
**** Borrar la tuplas en Despacho con capacidad >2
Despacho
| coddes | edificio | capacidad |
|--------+----------+-----------|
|    228 | 1G       |         1 |
|    234 | 2G       |         2 |

Telefono
| numero | coddes | edificio |
|--------+--------+----------|
|   3541 |    228 | 1F       |
|   3540 |      ? | ?        |
|   3202 |    228 | 1G       |

**** Modificar las tuplas en Despacho con capacidad >=5 pasando  a valer edificio = 1G
Despacho
| coddes | edificio | capacidad |
|--------+----------+-----------|
|    228 | 1G       |         5 |
|    010 | 1G       |         5 |
|    228 | 1G       |         1 |
|    234 | 2G       |         2 |

Telefono
| numero | coddes | edificio |
|--------+--------+----------|
|   3541 |    228 | 1G       |
|   3540 |    010 | 1G       |
|   3202 |    228 | 1G       |

**** Modificar las tuplas en Despacho con edificio = 1F pasando a valer edificio = 1G
No se puede, viola la CP

Despacho
| coddes | edificio | capacidad |
|--------+----------+-----------|
|    228 | 1F       |         5 |
|    010 | 1F       |         5 |
|    228 | 1G       |         1 |
|    234 | 2G       |         2 |

Telefono
| numero | coddes | edificio |
|--------+--------+----------|
|   3541 |    228 | 1F       |
|   3540 |    010 | 1F       |
|   3202 |    228 | 1G       |

**** Borrar las tuplas en Telefono con numero = 3541
Despacho
| coddes | edificio | capacidad |
|--------+----------+-----------|
|    228 | 1F       |         5 |
|    010 | 1F       |         5 |
|    228 | 1G       |         1 |
|    234 | 2G       |         2 |

Telefono
| numero | coddes | edificio |
|--------+--------+----------|
|   3540 |    010 | 1F       |
|   3202 |    228 | 1G       |

** CPA

*** Tipos de variables
si no se especifica el alcance de una variable, por defecto es privada

- private
  #+begin_src c
  suma = 0;
  #pragma opm parallel for private(suma)
  for (i=0; i < n ; i++)
    suma = suma + x[i]*x[i];
  #+end_src
  Incorrecto: tras el buclo sólo existe la suam del hilo principal (con valor 0) - además, las copias de cada hilo no se inicializan

- shared
  #+begin_src c
  suma = 0;
  #pragma opm parallel for shared(suma)
  for (i=0; i < n ; i++)
    suma = suma + x[i]*x[i];
  #+end_src
  Incorrecto: condición de carrera al leer/escribir

- reduction
  #+begin_src c
  suma = 0;
  #pragma opm parallel for reduction(+:suma)
  for (i=0; i < n ; i++)
    suma = suma + x[i]*x[i];
  #+end_src
  cada hilo realiza una porción de la suma, al final se combinan e nla suma total

  Es como una variable privada, pero:
  - los valores se combinan
  - se inicializa correctamente

- firstprivate
  + las variables privadas se crea sin un valor incial y tra el bloque parallel quedan indefinada
- lastprivate
  + se que con el valor de la "úlima" iteración

*** Ejercicio

**** ej8
Soy hilo 0 Valor de a = 8
Soy hilo 1 Valor de a = 8
---
Soy hilo 0 Valor de a = 5
---
Soy hilo 0 Valor de a = ??? (indefinada)
Soy hilo 1 Valor de a = ??? (indefinada)
---
Soy hilo 0 Valor de a = 5
Soy hilo 1 Valor de a = 5
